// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/10/2021 14:08:07"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          decoder_3_8
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module decoder_3_8_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A;
reg B;
reg C;
reg EN;
// wires                                               
wire [7:0] COUT;

// assign statements (if any)                          
decoder_3_8 i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.COUT(COUT),
	.EN(EN)
);
initial 
begin 
#100000000 $finish;
end 

// EN
initial
begin
	EN = 1'b1;
	EN = #2560000 1'b0;
	EN = #10240000 1'b1;
end 

// C
always
begin
	C = 1'b0;
	C = #2500000 1'b1;
	#2500000;
end 

// B
always
begin
	B = 1'b0;
	B = #5000000 1'b1;
	#5000000;
end 

// A
initial
begin
	A = 1'b1;
	A = #1280000 1'b0;
	A = #13720000 1'b1;
	A = #2500000 1'b0;
	# 2500000;
	repeat(6)
	begin
		A = 1'b1;
		A = #2500000 1'b0;
		# 2500000;
	end
	A = 1'b1;
	A = #2500000 1'b0;
	A = #1260000 1'b1;
	A = #13740000 1'b0;
	# 2500000;
	repeat(5)
	begin
		A = 1'b1;
		A = #2500000 1'b0;
		# 2500000;
	end
	A = 1'b1;
	A = #2500000 1'b0;
end 
endmodule

