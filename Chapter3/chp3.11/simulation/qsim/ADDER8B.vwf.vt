// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/05/2021 17:14:05"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ADDER8B
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ADDER8B_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A;
reg [7:0] B;
reg CIN;
// wires                                               
wire COUT;
wire [7:0] DOUT;

// assign statements (if any)                          
ADDER8B i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.CIN(CIN),
	.COUT(COUT),
	.DOUT(DOUT)
);
initial 
begin 
#100000000 $finish;
end 
// A[ 7 ]
initial
begin
	A[7] = 1'b1;
	A[7] = #2000000 1'b0;
	A[7] = #2000000 1'b1;
	A[7] = #8000000 1'b0;
	A[7] = #4000000 1'b1;
	A[7] = #2000000 1'b0;
	A[7] = #2000000 1'b1;
	A[7] = #2000000 1'b0;
	A[7] = #2000000 1'b1;
	A[7] = #14000000 1'b0;
	A[7] = #2000000 1'b1;
	A[7] = #2000000 1'b0;
	A[7] = #2000000 1'b1;
	A[7] = #2000000 1'b0;
	A[7] = #8000000 1'b1;
	A[7] = #2000000 1'b0;
	A[7] = #2000000 1'b1;
	A[7] = #2000000 1'b0;
	A[7] = #4000000 1'b1;
	A[7] = #2000000 1'b0;
	A[7] = #4000000 1'b1;
	A[7] = #2000000 1'b0;
	A[7] = #2000000 1'b1;
	A[7] = #4000000 1'b0;
	A[7] = #4000000 1'b1;
	A[7] = #12000000 1'b0;
	A[7] = #4000000 1'b1;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
	A[6] = #6000000 1'b1;
	A[6] = #2000000 1'b0;
	A[6] = #2000000 1'b1;
	A[6] = #6000000 1'b0;
	A[6] = #4000000 1'b1;
	A[6] = #2000000 1'b0;
	A[6] = #2000000 1'b1;
	A[6] = #2000000 1'b0;
	A[6] = #6000000 1'b1;
	A[6] = #4000000 1'b0;
	A[6] = #2000000 1'b1;
	A[6] = #14000000 1'b0;
	A[6] = #2000000 1'b1;
	A[6] = #2000000 1'b0;
	A[6] = #4000000 1'b1;
	A[6] = #2000000 1'b0;
	A[6] = #2000000 1'b1;
	A[6] = #2000000 1'b0;
	A[6] = #6000000 1'b1;
	A[6] = #6000000 1'b0;
	A[6] = #2000000 1'b1;
	A[6] = #2000000 1'b0;
	A[6] = #2000000 1'b1;
	A[6] = #2000000 1'b0;
	A[6] = #8000000 1'b1;
	A[6] = #2000000 1'b0;
	A[6] = #2000000 1'b1;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b1;
	A[5] = #4000000 1'b0;
	A[5] = #2000000 1'b1;
	A[5] = #6000000 1'b0;
	A[5] = #2000000 1'b1;
	A[5] = #4000000 1'b0;
	A[5] = #2000000 1'b1;
	A[5] = #4000000 1'b0;
	A[5] = #2000000 1'b1;
	A[5] = #2000000 1'b0;
	A[5] = #4000000 1'b1;
	A[5] = #18000000 1'b0;
	A[5] = #2000000 1'b1;
	A[5] = #2000000 1'b0;
	A[5] = #8000000 1'b1;
	A[5] = #4000000 1'b0;
	A[5] = #2000000 1'b1;
	A[5] = #4000000 1'b0;
	A[5] = #2000000 1'b1;
	A[5] = #2000000 1'b0;
	A[5] = #2000000 1'b1;
	A[5] = #2000000 1'b0;
	A[5] = #12000000 1'b1;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
	A[4] = #2000000 1'b1;
	A[4] = #8000000 1'b0;
	A[4] = #2000000 1'b1;
	A[4] = #6000000 1'b0;
	A[4] = #6000000 1'b1;
	A[4] = #8000000 1'b0;
	A[4] = #2000000 1'b1;
	A[4] = #2000000 1'b0;
	A[4] = #4000000 1'b1;
	A[4] = #6000000 1'b0;
	A[4] = #4000000 1'b1;
	A[4] = #4000000 1'b0;
	A[4] = #2000000 1'b1;
	A[4] = #6000000 1'b0;
	A[4] = #6000000 1'b1;
	A[4] = #8000000 1'b0;
	A[4] = #2000000 1'b1;
	A[4] = #6000000 1'b0;
	A[4] = #6000000 1'b1;
	A[4] = #4000000 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b1;
	A[3] = #2000000 1'b0;
	A[3] = #4000000 1'b1;
	A[3] = #6000000 1'b0;
	A[3] = #2000000 1'b1;
	A[3] = #2000000 1'b0;
	A[3] = #2000000 1'b1;
	A[3] = #2000000 1'b0;
	A[3] = #2000000 1'b1;
	A[3] = #10000000 1'b0;
	A[3] = #4000000 1'b1;
	A[3] = #2000000 1'b0;
	A[3] = #4000000 1'b1;
	A[3] = #8000000 1'b0;
	A[3] = #4000000 1'b1;
	A[3] = #6000000 1'b0;
	A[3] = #10000000 1'b1;
	A[3] = #2000000 1'b0;
	A[3] = #4000000 1'b1;
	A[3] = #2000000 1'b0;
	A[3] = #2000000 1'b1;
	A[3] = #8000000 1'b0;
	A[3] = #2000000 1'b1;
	A[3] = #2000000 1'b0;
	A[3] = #6000000 1'b1;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b1;
	A[2] = #6000000 1'b0;
	A[2] = #6000000 1'b1;
	A[2] = #4000000 1'b0;
	A[2] = #6000000 1'b1;
	A[2] = #4000000 1'b0;
	A[2] = #8000000 1'b1;
	A[2] = #2000000 1'b0;
	A[2] = #4000000 1'b1;
	A[2] = #4000000 1'b0;
	A[2] = #2000000 1'b1;
	A[2] = #4000000 1'b0;
	A[2] = #4000000 1'b1;
	A[2] = #2000000 1'b0;
	A[2] = #4000000 1'b1;
	A[2] = #2000000 1'b0;
	A[2] = #8000000 1'b1;
	A[2] = #4000000 1'b0;
	A[2] = #2000000 1'b1;
	A[2] = #4000000 1'b0;
	A[2] = #4000000 1'b1;
	A[2] = #2000000 1'b0;
	A[2] = #2000000 1'b1;
	A[2] = #2000000 1'b0;
	A[2] = #2000000 1'b1;
	A[2] = #4000000 1'b0;
	A[2] = #2000000 1'b1;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
	A[1] = #2000000 1'b1;
	A[1] = #2000000 1'b0;
	A[1] = #12000000 1'b1;
	A[1] = #2000000 1'b0;
	A[1] = #4000000 1'b1;
	A[1] = #2000000 1'b0;
	A[1] = #6000000 1'b1;
	A[1] = #6000000 1'b0;
	A[1] = #2000000 1'b1;
	A[1] = #4000000 1'b0;
	A[1] = #4000000 1'b1;
	A[1] = #6000000 1'b0;
	A[1] = #4000000 1'b1;
	A[1] = #2000000 1'b0;
	A[1] = #2000000 1'b1;
	A[1] = #4000000 1'b0;
	A[1] = #6000000 1'b1;
	A[1] = #4000000 1'b0;
	A[1] = #2000000 1'b1;
	A[1] = #4000000 1'b0;
	A[1] = #6000000 1'b1;
	A[1] = #2000000 1'b0;
	A[1] = #2000000 1'b1;
	A[1] = #2000000 1'b0;
	A[1] = #2000000 1'b1;
	A[1] = #2000000 1'b0;
	A[1] = #2000000 1'b1;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b1;
	A[0] = #8000000 1'b0;
	A[0] = #2000000 1'b1;
	A[0] = #6000000 1'b0;
	A[0] = #10000000 1'b1;
	A[0] = #10000000 1'b0;
	A[0] = #2000000 1'b1;
	A[0] = #8000000 1'b0;
	A[0] = #6000000 1'b1;
	A[0] = #2000000 1'b0;
	A[0] = #2000000 1'b1;
	A[0] = #2000000 1'b0;
	A[0] = #6000000 1'b1;
	A[0] = #2000000 1'b0;
	A[0] = #4000000 1'b1;
	A[0] = #2000000 1'b0;
	A[0] = #6000000 1'b1;
	A[0] = #4000000 1'b0;
	A[0] = #6000000 1'b1;
	A[0] = #2000000 1'b0;
	A[0] = #2000000 1'b1;
	A[0] = #2000000 1'b0;
	A[0] = #2000000 1'b1;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
	B[7] = #8000000 1'b1;
	B[7] = #12000000 1'b0;
	B[7] = #12000000 1'b1;
	B[7] = #4000000 1'b0;
	B[7] = #4000000 1'b1;
	B[7] = #8000000 1'b0;
	B[7] = #8000000 1'b1;
	B[7] = #8000000 1'b0;
	B[7] = #20000000 1'b1;
	B[7] = #4000000 1'b0;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b0;
	B[6] = #4000000 1'b1;
	B[6] = #8000000 1'b0;
	B[6] = #4000000 1'b1;
	B[6] = #4000000 1'b0;
	B[6] = #16000000 1'b1;
	B[6] = #4000000 1'b0;
	B[6] = #4000000 1'b1;
	B[6] = #4000000 1'b0;
	B[6] = #8000000 1'b1;
	B[6] = #20000000 1'b0;
	B[6] = #4000000 1'b1;
	B[6] = #4000000 1'b0;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b0;
	B[5] = #8000000 1'b1;
	B[5] = #4000000 1'b0;
	B[5] = #8000000 1'b1;
	B[5] = #12000000 1'b0;
	B[5] = #4000000 1'b1;
	B[5] = #8000000 1'b0;
	B[5] = #12000000 1'b1;
	B[5] = #12000000 1'b0;
	B[5] = #8000000 1'b1;
	B[5] = #8000000 1'b0;
	B[5] = #4000000 1'b1;
	B[5] = #8000000 1'b0;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b0;
	B[4] = #4000000 1'b1;
	B[4] = #16000000 1'b0;
	B[4] = #4000000 1'b1;
	B[4] = #4000000 1'b0;
	B[4] = #4000000 1'b1;
	B[4] = #8000000 1'b0;
	B[4] = #4000000 1'b1;
	B[4] = #8000000 1'b0;
	B[4] = #12000000 1'b1;
	B[4] = #4000000 1'b0;
	B[4] = #20000000 1'b1;
	B[4] = #8000000 1'b0;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b1;
	B[3] = #4000000 1'b0;
	B[3] = #4000000 1'b1;
	B[3] = #4000000 1'b0;
	B[3] = #32000000 1'b1;
	B[3] = #8000000 1'b0;
	B[3] = #4000000 1'b1;
	B[3] = #4000000 1'b0;
	B[3] = #8000000 1'b1;
	B[3] = #12000000 1'b0;
	B[3] = #4000000 1'b1;
	B[3] = #4000000 1'b0;
	B[3] = #4000000 1'b1;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
	B[2] = #8000000 1'b1;
	B[2] = #16000000 1'b0;
	B[2] = #4000000 1'b1;
	B[2] = #20000000 1'b0;
	B[2] = #4000000 1'b1;
	B[2] = #8000000 1'b0;
	B[2] = #8000000 1'b1;
	B[2] = #8000000 1'b0;
	B[2] = #4000000 1'b1;
	B[2] = #8000000 1'b0;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b1;
	B[1] = #4000000 1'b0;
	B[1] = #8000000 1'b1;
	B[1] = #8000000 1'b0;
	B[1] = #8000000 1'b1;
	B[1] = #4000000 1'b0;
	B[1] = #4000000 1'b1;
	B[1] = #4000000 1'b0;
	B[1] = #4000000 1'b1;
	B[1] = #4000000 1'b0;
	B[1] = #4000000 1'b1;
	B[1] = #4000000 1'b0;
	B[1] = #8000000 1'b1;
	B[1] = #4000000 1'b0;
	B[1] = #8000000 1'b1;
	B[1] = #4000000 1'b0;
	B[1] = #8000000 1'b1;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b0;
	B[0] = #8000000 1'b1;
	B[0] = #12000000 1'b0;
	B[0] = #4000000 1'b1;
	B[0] = #4000000 1'b0;
	B[0] = #4000000 1'b1;
	B[0] = #16000000 1'b0;
	B[0] = #4000000 1'b1;
	B[0] = #16000000 1'b0;
	B[0] = #4000000 1'b1;
	B[0] = #4000000 1'b0;
	B[0] = #12000000 1'b1;
	B[0] = #4000000 1'b0;
	B[0] = #4000000 1'b1;
end 

// CIN
initial
begin
	CIN = 1'b0;
	CIN = #8960000 1'b1;
	CIN = #26880000 1'b0;
end 
endmodule

