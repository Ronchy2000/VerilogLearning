// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/05/2021 21:01:23"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          test1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module test1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] A;
reg [3:0] B;
reg [3:0] C;
reg [3:0] D;
// wires                                               
wire C0;
wire R1;
wire R2;
wire [3:0] RAB;
wire [3:0] RCD;
wire [7:0] RM1;
wire [7:0] RM2;
wire [3:0] S;

// assign statements (if any)                          
test1 i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.C0(C0),
	.D(D),
	.R1(R1),
	.R2(R2),
	.RAB(RAB),
	.RCD(RCD),
	.RM1(RM1),
	.RM2(RM2),
	.S(S)
);
initial 
begin 
#100000000 $finish;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
	A[3] = #60000000 1'b1;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
	A[2] = #20000000 1'b1;
	A[2] = #40000000 1'b0;
end 
// A[ 1 ]
initial
begin
	repeat(2)
	begin
		A[1] = 1'b1;
		A[1] = #20000000 1'b0;
		# 20000000;
	end
	A[1] = 1'b1;
end 
// A[ 0 ]
always
begin
	A[0] = 1'b0;
	A[0] = #10000000 1'b1;
	#10000000;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
	B[3] = #40000000 1'b1;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b1;
	B[2] = #40000000 1'b0;
	B[2] = #40000000 1'b1;
end 
// B[ 1 ]
initial
begin
	repeat(2)
	begin
		B[1] = 1'b0;
		B[1] = #20000000 1'b1;
		# 20000000;
	end
	B[1] = 1'b0;
end 
// B[ 0 ]
always
begin
	B[0] = 1'b0;
	B[0] = #10000000 1'b1;
	#10000000;
end 
// C[ 3 ]
initial
begin
	C[3] = 1'b0;
	C[3] = #60000000 1'b1;
end 
// C[ 2 ]
initial
begin
	C[2] = 1'b0;
	C[2] = #20000000 1'b1;
	C[2] = #40000000 1'b0;
end 
// C[ 1 ]
initial
begin
	repeat(2)
	begin
		C[1] = 1'b1;
		C[1] = #20000000 1'b0;
		# 20000000;
	end
	C[1] = 1'b1;
end 
// C[ 0 ]
always
begin
	C[0] = 1'b0;
	C[0] = #10000000 1'b1;
	#10000000;
end 
// D[ 3 ]
initial
begin
	D[3] = 1'b0;
	D[3] = #40000000 1'b1;
end 
// D[ 2 ]
initial
begin
	D[2] = 1'b1;
	D[2] = #40000000 1'b0;
	D[2] = #40000000 1'b1;
end 
// D[ 1 ]
initial
begin
	repeat(2)
	begin
		D[1] = 1'b0;
		D[1] = #20000000 1'b1;
		# 20000000;
	end
	D[1] = 1'b0;
end 
// D[ 0 ]
always
begin
	D[0] = 1'b0;
	D[0] = #10000000 1'b1;
	#10000000;
end 
endmodule

